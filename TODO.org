* Notes of things to do.

** C bindings
   Things that are either missing, or inadequate from the Unix or
   other bindings in ocaml.

   - [X] readdir - need to return name/inode pairs
   - [X] lstat - return finer grained time and more int64s
   - [X] open  - be able to pass in NOATIME flag to open
   - [X] utimensat - Set time, accurately, and not following
   - [X] mknod
   - [X] lchown  - exist
   - [ ] read/write that don't copy (later?)  will block the GC

** Tasks to get minimal functionality

   - [X] Generic walker code
   - [X] restore
   - [X] seen-db conversions
   - [X] backup
   - [X] Use seen-db in backup

** Tasks to be comparable to jpool

   - [X] general logger
   - [X] progress meter (can be improved)
   - [X] clone command
   - [X] index recovery
   - [ ] 64-bit uid/gid (not sure this is ever necessary)
   - [X] pool locking
   - [X] pool hash verification
   - [ ] don't cross device boundaries
   - [X] progress meter on backup
   - [ ] manual prune of expired cache entries
   - [ ] flush pool and index files on write
   - [ ] Use uuid of fs on non-btrfs filesystems
   - [X] Implement manager

** Tasks to extend functionality

   - [X] Simple size scanning
   - [ ] Tree comparisons
   - [ ] Write statistics on clone
   - [ ] Store canonical path in backup to make cache regeneration easier
   - [ ] Exclusion lists
   - [ ] read-only open of pool, with read locking
   - [X] config file, to set default pool
   - [ ] Show latest path in tree traversals
   - [ ] Save/restore xattrs
   - [X] Move lvm volume down into fs so it can differ per volume

** Misc things (cleanups etc)

   - [ ] File bug report with ocamlnet about append not working.
   - [ ] make-cache writes to incorrect named database file, when
     snapshots are used.
   - [ ] Build source as library and two executables that use it.
   - [X] Properly close/cleanup pools
   - [ ] Allow #enter on traveral to abort the traversal (maybe there
     isn't anything to do here, since raising an exception might just
     work).
   - [X] Better control over when hashes are verified.  Normally, we
     probably only want to verify them when explicitly asked to, or
     perhaps when restoring.
   - [ ] Progress meter on multiple-clones doesn't cleanup properly.
     (This appears to be explicit in the code, the flush is to make
     the progress meter stick).
   - [ ] Disable progress meter on unit tests
   - [X] Nicer timestamps in log messages
   - [X] Proper command line processing
   - [X] Custom progress meter for clone as well  The whole meter
     needs to be cleaned up a bit, perhaps made into a functor/module
     instead of done with classes.
   - [ ] Improve UI for cache creation.  Allow the user to specify the
     destination name of the new cache, which will be useful for
     remote backups.  Provide a utility to ask for the cache path of a
     given name.

   - [ ] Store the backups last done into the seen cache.  Detect if
     one is missing (or out of date), and refresh it by walking the
     current backup.  This approach will work well for network
     backups.  Need to solve the notion of canonical names for backups
     so we can definitively refer to older backups.

   - [X] Distinguish short help text from long help.
   - [X] Don't use the Batteries handler, but use the exposed argument
     spec type.

   - [X] Compute a version string and encoding it into the
     executable.  I'm thinking of finding the most recent tag, and
     then using a timestamp of the HEAD commit if the tree is dirty
     (rather than just a hash).
   - [ ] Make the version code smarter about not being in a git repo.

   - [ ] Show dir and nondir counts when doing backups.

   - [ ] Allow named groups of backup pools, instead of just a single
     default path.

   - [X] Fix 'dup' vs 'skip' when dumping.  Some things seem to be
     counted incorrectly.

** Big things

*** Network backup

    An easier way to allow remote backups is to specify a way of
    having the index files, and the seen database in a different
    directory than the pool data files.  This would allow the backup
    data itself to be on something, such as sshfs, whereas the cache
    data would be local.

    Also, investigate whether sftp has advanced sufficiently to allow
    it to do backups.

**** Enhanced config
     - [X] Move config to separate file
     - [X] Change pool to an option (ask on Stackoverflow)
     - [X] Allow an alternate config file for testing
     - [X] Add a config record to define clients, name, command, etc.
**** Accessing remote client
     - [X] Spawn shell and send simple command to client

**** Refactoring needed
     - [ ] Generalize logging.  The logging and message mechanism
       shouldn't just print stuff to stderr, but be able to be hooked
       into to send these as messages.

     - [ ] Progress meter extraction?  Or just print the meters over
       the channel.  In any case, the meter needs to be driver over
       the channel so it is correctly coordinated with the other
       output.

** Problem with jpool

   Things that jpool is also broken with that probably should be
   fixed.

   - [ ] Restore of non-regular nodes that are hardlinked.

*** Traversal structures

    The 'du' command as well as various garbage collection algorithms
    need to keep track of which nodes have been visited.  Storing
    hashes redundantly takes a lot of memory.

    Since we already have all of the hashes stored, anyway, and
    existing files never grow, we can enumerate all of the hashes
    (based on the offset with in each file).  This would have to be
    added to the pool code as mapping that would be specific to the
    local pool.

    - [X] Hash indices for traversal

    Need to analyze which data structure is best for storing this
    result.  The tree-based ones seem good for traversals that
    represent a small subset of the data.

    Sizes

    | Structure  |     Size | in MB  |
    |------------+----------+--------|
    | Set.IntSet | 22257040 | 21.2MB |
    | ISet       | 10940288 | 10.4MB |
    | BitSet     |   260008 | 0.2MB  |

    So, clearly, for larger data sets, just using a bitset wins.

    For du and comparison between trees, we probably want a cache of
    each directory and information about it's size.  This might be
    best stored in a local database.

* Things beyond the backup itself

  - [ ] Manage BTR snapshots
  - [ ] Scheduling and other stuff that I have in scripts now

* Size statistics from my backups:

f08156fb0c8c5365eb99c6f3d565ec5fc91a8a5b 2012-02-12 23:14 fs=@boot host=a64 kind=snapshot

kind          data size                  compressed size        count
---- ---------------------------   ---------------------------  -----
back             108 ( 108.0B  )               160 ( 160.0B  )  (1)
blob       110048746 ( 105.0MiB)          97991168 (  93.5MiB)  (650)
dir             8647 (   8.4Kib)              7392 (   7.2Kib)  (3)
ind0            8400 (   8.2Kib)              9552 (   9.3Kib)  (22)
node           43473 (  42.5Kib)             49664 (  48.5Kib)  (258)
null               0 (   0.0B  )                48 (  48.0B  )  (1)

f092dbb8a7af0a08d5a19f36be8cbdf458fb22c9 2012-02-12 23:15 fs=@root host=a64 kind=snapshot

kind       data size               compressed size              count
---- --------------- -----------   --------------- -----------  -----
back             108 ( 108.0B  )               160 ( 160.0B  )  (1)
blob      8972019468 (   8.4GiB)        3165819360 (   2.9GiB)  (235237)
dir         11283714 (  10.8MiB)          11545616 (  11.0MiB)  (34648)
dir0              80 (  80.0B  )               192 ( 192.0B  )  (2)
ind0          512620 ( 500.6Kib)            671424 ( 655.7Kib)  (3370)
node        56257141 (  53.7MiB)          64219184 (  61.2MiB)  (328528)
null               0 (   0.0B  )                48 (  48.0B  )  (1)

50926640b843a312b62a4aa262dde100bdd82398 2012-02-12 23:21 fs=@home host=a64 kind=snapshot

kind          data size                  compressed size        count
---- ---------------------------   ---------------------------  -----
back             108 ( 108.0B  )               160 ( 160.0B  )  (1)
blob     19229770720 (  17.9GiB)       10862134016 (  10.1GiB)  (459719)
dir         21469020 (  20.5MiB)          22016896 (  21.0MiB)  (72205)
ind0         1213440 (   1.2MiB)           1316432 (   1.3MiB)  (4606)
node       101123886 (  96.4MiB)         116917936 ( 111.5MiB)  (571050)
null               0 (   0.0B  )                48 (  48.0B  )  (1)

(actually huya)
b9fbb3cc5f71e75c4d8cd7ed5c14f5e5cdfd69bc 2012-02-13 10:13 fs=@home host=a64 kind=snapshot

kind          data size                  compressed size        count
---- ---------------------------   ---------------------------  -----
back             108 ( 108.0B  )               160 ( 160.0B  )  (1)
blob     26698648904 (  24.9GiB)       10711035744 (  10.0GiB)  (341957)
dir         22060871 (  21.0MiB)          23819568 (  22.7MiB)  (83717)
dir0              40 (  40.0B  )                96 (  96.0B  )  (1)
ind0         1668800 (   1.6MiB)           1542416 (   1.5MiB)  (5046)
node       115694353 ( 110.3MiB)         118871648 ( 113.4MiB)  (586899)
null               0 (   0.0B  )                48 (  48.0B  )  (1)
